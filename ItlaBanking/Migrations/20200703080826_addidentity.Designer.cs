// <auto-generated />
using System;
using ItlaBanking.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ItlaBanking.Migrations
{
    [DbContext(typeof(ItlaBankingContext))]
    [Migration("20200703080826_addidentity")]
    partial class addidentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ItlaBanking.Models.Beneficiario", b =>
                {
                    b.Property<int>("IdUsuarioCliente");

                    b.Property<int>("IdUsuarioBeneficiario");

                    b.HasKey("IdUsuarioCliente", "IdUsuarioBeneficiario");

                    b.HasIndex("IdUsuarioBeneficiario");

                    b.ToTable("Beneficiario");
                });

            modelBuilder.Entity("ItlaBanking.Models.Cuenta", b =>
                {
                    b.Property<int>("NumeroCuenta");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<int?>("Categoria");

                    b.Property<DateTime?>("FechaAdquisicion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdUsuario");

                    b.HasKey("NumeroCuenta");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Cuenta");
                });

            modelBuilder.Entity("ItlaBanking.Models.Prestamos", b =>
                {
                    b.Property<int>("NumeroPrestamo");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Activo')")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaExpiracion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdUsuario");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("decimal(13, 2)");

                    b.HasKey("NumeroPrestamo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Prestamos");
                });

            modelBuilder.Entity("ItlaBanking.Models.TarjetaCredito", b =>
                {
                    b.Property<int>("NumeroTarjeta");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Activo')")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaExpiracion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("FechaPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IdUsuario");

                    b.Property<decimal?>("MontoLimite")
                        .HasColumnType("decimal(13, 2)");

                    b.HasKey("NumeroTarjeta");

                    b.HasIndex("IdUsuario");

                    b.ToTable("TarjetaCredito");
                });

            modelBuilder.Entity("ItlaBanking.Models.Transacciones", b =>
                {
                    b.Property<int>("IdTransacciones")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Fecha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Monto")
                        .HasColumnType("decimal(13, 2)");

                    b.Property<int>("NumeroCuenta");

                    b.Property<int?>("NumeroCuentaDestinatario");

                    b.HasKey("IdTransacciones");

                    b.HasIndex("NumeroCuenta");

                    b.ToTable("Transacciones");
                });

            modelBuilder.Entity("ItlaBanking.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Cedula")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Clave")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Correo")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Inactivo')")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Nombre")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("TipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('Cliente')")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.Property<string>("Usuario1")
                        .HasColumnName("Usuario")
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ItlaBanking.Models.Beneficiario", b =>
                {
                    b.HasOne("ItlaBanking.Models.Usuario", "IdUsuarioBeneficiarioNavigation")
                        .WithMany("BeneficiarioIdUsuarioBeneficiarioNavigation")
                        .HasForeignKey("IdUsuarioBeneficiario")
                        .HasConstraintName("FK__Beneficia__IdUsu__3E52440B");

                    b.HasOne("ItlaBanking.Models.Usuario", "IdUsuarioClienteNavigation")
                        .WithMany("BeneficiarioIdUsuarioClienteNavigation")
                        .HasForeignKey("IdUsuarioCliente")
                        .HasConstraintName("FK__Beneficia__IdUsu__3D5E1FD2");
                });

            modelBuilder.Entity("ItlaBanking.Models.Cuenta", b =>
                {
                    b.HasOne("ItlaBanking.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Cuenta")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("fk_usu_cut");
                });

            modelBuilder.Entity("ItlaBanking.Models.Prestamos", b =>
                {
                    b.HasOne("ItlaBanking.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Prestamos")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("fk_pre_usu");
                });

            modelBuilder.Entity("ItlaBanking.Models.TarjetaCredito", b =>
                {
                    b.HasOne("ItlaBanking.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("TarjetaCredito")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("fk_taj_usu");
                });

            modelBuilder.Entity("ItlaBanking.Models.Transacciones", b =>
                {
                    b.HasOne("ItlaBanking.Models.Cuenta", "NumeroCuentaNavigation")
                        .WithMany("Transacciones")
                        .HasForeignKey("NumeroCuenta")
                        .HasConstraintName("fk_cut_tra");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
